name: Build and Deploy .NET App with Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  # Build Stage #
  build:
    runs-on: windows-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x' # Altere para a versão desejada
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --output ./output --no-build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-app
          path: ./output

  # Unit Test Stage
  unit-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Test
      run: dotnet test --no-restore --verbosity normal

  lacework-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan the repo for vulnerabilities in IaC
        run: |
             # Required to pass the GITHUB and Lacework (LW) environment variables to use
             env | grep "GITHUB_\|LW_\|CI_" > env.list
             # Required command based on what you want to scan in the repository
             echo "SCAN_COMMAND=tf-scan" >> env.list
             # Required if you are not mounting the volume on /app
             echo "WORKSPACE=src" >> env.list
             # if we want to fail the step for any critical failed findings (violations) in the assessment scan
             #echo "EXIT_FLAG='critical'" >> env.list 
             docker run --env-file env.list -v "$(pwd):/app/src" lacework/codesec-iac:latest
        env:
          LW_ACCOUNT: ${{ secrets.LW_ACCOUNT }}
          LW_API_KEY: ${{ secrets.LW_API_KEY }}
          LW_API_SECRET: ${{ secrets.LW_API_SECRET }}

  lacework-app-scan:
    runs-on: ubuntu-latest

    steps:
      - name: First message
        run: echo "This will be the application validation stage"


  # Terraform Stage #
  terraform:
    runs-on: ubuntu-latest
    needs: [lacework-scan, lacework-scan]

    steps:
      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Credentials as Environment Variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=tspontes7xg2dfzesta001" \
            -backend-config="container_name=terraform" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="sas_token=sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiyx&se=2024-06-25T22:20:08Z&st=2024-06-25T14:20:08Z&spr=https,http&sig=BF3VvsCA9QZXLvbjn6A1PtCvFrRAUeHK1URlDUPtsvQ%3D"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Debug Terraform Outputs
        run: |
          cd terraform
          terraform output -json

      - name: Output Azure App Service Name
        id: output
        run: |
          cd terraform
          app_service_name=$(terraform output -raw app_service_name)
          resource_group_name=$(terraform output -raw resource_group_name) # Adicionei esta linha para capturar o nome do resource group
          echo "App Service Name: $app_service_name"
          echo "Resource Group Name: $resource_group_name" # Exibindo o nome do resource group
          echo "app_service_name=$app_service_name" >> $GITHUB_ENV
          echo "resource_group_name=$resource_group_name" >> $GITHUB_ENV # Salvando o nome do resource group no ambiente
          
      - name: Use Output
        run: echo "App Service Name is ${{ env.app_service_name }}"           


  # Deploy Stage
  deploy:
    runs-on: windows-latest
    needs: [build, terraform]

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: dotnet-app
          path: ./output

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve Azure App Service Publish Profile
        id: retrieve-profile
        run: |
          az webapp deployment list-publishing-profiles --resource-group ${{ env.resource_group_name }} --name ${{ env.app_service_name }} --output json > publishProfile.json # Ajustei para usar as variáveis de ambiente
          cat publishProfile.json

      - name: Set Publish Profile as Secret
        id: set-profile
        run: echo "AZUREAPPSERVICE_PUBLISHPROFILE=$(cat publishProfile.json)" >> $GITHUB_ENV

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.app_service_name }} # Ajustei para usar a variável de ambiente
          publish-profile: ${{ env.AZUREAPPSERVICE_PUBLISHPROFILE }}